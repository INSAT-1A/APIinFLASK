from flask import Flask, jsonify, request
import requests
import os
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import Column, Integer, String, Float
from flask_marshmallow import Marshmallow
from flask_jwt_extended import jwt_required, JWTManager, create_access_token
from flask_mail import Mail, Message

app = Flask(__name__)
cf_port = os.getenv("PORT")
basedir = os.path.abspath(os.path.dirname(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'planets.db')
app.config['JWT_SECRET_KEY'] = 'super-secret'
app.config['MAIL_SERVER'] = 'smtp.mailtrap.io'
# app.config['MAIL_USERNAME']= os.environ['MAIL_USERNAME']
# app.config['MAIL_PASSWORD']= os.environ['MAIL_PASSWORD']
# app.config['MAIL_SERVER']='smtp.mailtrap.io'
app.config['MAIL_PORT'] = 2525
app.config['MAIL_USERNAME'] = 'd84a37f058dc2e'
app.config['MAIL_PASSWORD'] = 'aa9498f27ab5bc'

db = SQLAlchemy(app)
ma = Marshmallow(app)
jwt = JWTManager(app)
mail = Mail(app)


@app.cli.command('db_create')
def db_create():
    db.create_all()
    print('Database Created!')


@app.cli.command('db_drop')
def db_drop():
    db.drop_all()
    print('Database Dropped')


@app.cli.command('db_seed')
@jwt_required
def db_seed():
    mercury = Planet(planet_name='Mercury',
                     planet_type='Class D',
                     home_star='SoL',
                     mass=3.258e23,
                     radius=1516,
                     distance=35.98e6
                     )
    venus = Planet(planet_name='Venus',
                   planet_type='Class K',
                   home_star='SoL',
                   mass=4.867e24,
                   radius=3760,
                   distance=67.24e6
                   )
    earth = Planet(planet_name='Earth',
                   planet_type='Class M',
                   home_star='SoL',
                   mass=5.9722e24,
                   radius=3959,
                   distance=92.98e6
                   )
    db.session.add(mercury)
    db.session.add(venus)
    db.session.add(earth)

    test_user = User(first_name='Sarena',
                     last_name='Van Der Woodson',
                     email='test@test.com',
                     password='Intial@1234')
    db.session.add(test_user)
    db.session.commit()
    print("Database seeded")


@app.route('/')
def hello_world():  # put application's code here
    print("hello world")
    return '<h1>Hello World!</h1>'


@app.route('/super_simple', methods=['POST', 'GET'])
def super_simple():
    return "<h1>Hello World 2!</h1>"


# request method to get the key value pair


@app.route('/parameter')
def parameters():
    name = request.args.get('name')
    age = int(request.args.get('age'))
    if age < 18:
        return jsonify(message="sorry " + name + ", You are underage")
    else:
        return jsonify(message="Welcome " + name + ", to the Adult's club")


# Variable rule matching to grab the key value pairs off of the url itself.\\


@app.route('/url_variables/<string:name>/<int:age>')
def url_param(name: str, age: int):
    if age < 18:
        return jsonify(message="sorry " + name + ", You are underage")
    else:
        return jsonify(message="Welcome " + name + ", to the Adult's club")


@app.route('/planets', methods=['GET'])
def planets():
    planet_list = Planet.query.all()
    # planet_list is list type.TypeError:
    # The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a list.
    # Now serialize
    result = planets_schema.dump(planet_list)
    print(type(planet_list))  # Output <class 'list'>

    # return jsonify(planet_list) #Object of type Planet is not JSON serializable
    return jsonify(result)


@app.route('/users', methods=['GET'])
def users():
    user_list = User.query.all()
    results = users_schema.dump(user_list)
    return jsonify(results)


@app.route('/register', methods=['POST'])
def register():
    email = request.form['email']
    # .query all sql statements generated by sqlalchemy is constructed by .query before sending to database
    # .all() returns resultset in the form of list of objects
    # filter_by() applies the given filtering criterion to a copy of this query using SQL expressions
    # .first() It returns first result of the query or None if the result doesn't return any row.

    test = User.query.filter_by(email=email).first()
    if test:
        return jsonify(message='The email already exists'), 409
    else:
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        password = request.form['password']
        user = User(first_name=first_name, last_name=last_name, email=email, password=password)
        db.session.add(user)
        db.session.commit()
        return jsonify(message='User is created'), 201


@app.route('/login', methods=['POST'])
def login():
    if request.is_json:
        email = request.json['email']
        password = request.json['password']
    else:
        email = request.form['email']
        password = request.form['password']
    check = User.query.filter_by(email=email, password=password).first()
    if check:
        access_token = create_access_token(identity=email)
        return jsonify(message='You are logged in', access_token=access_token), 200
    else:
        return jsonify(message='Bad email or password'), 401


@app.route('/retrieve_password/<string:email>', methods=['GET'])
def retrieve_password(email: str):
    user = User.query.filter_by(email=email).first()
    if user:
        msg = Message("your planetary API password is " + user.password,
                      sender="admin@planetary-api.com",
                      recipients=[email])
        mail.send(msg)
        return jsonify(message="Password sent to " + email)
    else:
        return jsonify(message="That email doesn't exist"), 401


@app.route('/planet_details/<int:planet_id>', methods=['GET'])
def planet_details(planet_id: int):
    planet = Planet.query.filter_by(planet_id=planet_id).first()
    if planet:
        result = planet_schema.dump(planet)
        return jsonify(result)
    else:
        return jsonify(message="The Id you entered is invalid"), 404


@app.route('/add_planet',methods=['POST'])
@jwt_required()
def add_planet():
    planet_name=request.form['planet_name']
    check = Planet.query.filter_by(planet_name=planet_name).first()
    if check :
        return jsonify(message= "This planet already exists in the database")
    else:
        planet_type=request.form['planet_type']
        home_star=request.form['home_star']
        mass=request.form['mass']
        radius=request.form['radius']
        distance=request.form['distance']

        new_planet=Planet(planet_name=planet_name,planet_type=planet_type, home_star=home_star,mass=mass,radius=radius,distance=distance)
        db.session.add(new_planet)
        db.session.commit()
        return jsonify(message="You have added a new planet called " + new_planet.planet_name)


@app.route('/update_planet', methods=['PUT'])
@jwt_required()
def update_planet():
    planet_id = int(request.form['planet_id'])
    planet = Planet.query.filter_by(planet_id=planet_id).first()
    if planet:
        planet.planet_name = request.form['planet_name']
        planet.planet_type = request.form['planet_type']
        planet.home_star = request.form['home_star']
        planet.mass = float(request.form['mass'])
        planet.radius = float(request.form['radius'])
        planet.distance = float(request.form['distance'])
        db.session.commit()
        return jsonify(message="You updated a planet"), 202
    else:
        return jsonify(message="That planet does not exist"), 404


@app.route('/remove_planet/<int:planet_id>',methods=['DELETE'])
def remove_planet(planet_id : int):
    planet = Planet.query.filter_by(planet_id=planet_id).first()
    if planet:
        db.session.delete(planet)
        db.session.commit()
        return jsonify(message="You have deleted the planet")
    else:
        return jsonify (message='You have entered wrong planet Id')


# database Model
class User(db.Model):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    first_name = Column(String)
    last_name = Column(String)
    email = Column(String, unique=True)
    password = Column(String)


class Planet(db.Model):
    __tablename__ = 'planets'
    planet_id = Column(Integer, primary_key=True)
    planet_name = Column(String)
    planet_type = Column(String)
    home_star = Column(String)
    mass = Column(Float)
    radius = Column(Float)
    distance = Column(Float)


# Define your output format with marshmallow
class UserSchema(ma.Schema):
    class Meta:
        fields = ('id', 'first_name', 'last_name', 'email', 'password')


class PlanetSchema(ma.Schema):
    class Meta:
        fields = ('planet_id', 'planet_name', 'planet_type', 'home_star', 'mass', 'radius', 'distance')


user_schema = UserSchema()
users_schema = UserSchema(many=True)

planet_schema = PlanetSchema()
planets_schema = PlanetSchema(many=True)

if __name__ == '__main__':
    if cf_port is None:
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
        app.run(host='0.0.0.0', port=int(cf_port), debug=True)
